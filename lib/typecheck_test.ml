open Ast
open Typecheck

let var (x, id) = (Var (x, id), ())
let lam (x, t) = (Lam (x, t), ())
let app (t1, t2) = (App (t1, t2), ())
let borrow x = (Borrow x, ())
let borrow_mut x = (BorrowMut x, ())
let deref t = (Deref t, ())
let if_ (t1, t2, t3) = (IfElse (t1, t2, t3), ())
let let_in (x, t1, t2) = (LetIn (x, t1, t2), ())
let assign (x, t) = (Assign (x, t), ())
let deref_assign (x, t) = (DerefAssign (x, t), ())
let zero = (Zero, ())
let succ t = (Succ t, ())
let pred t = (Pred t, ())
let true_ = (True, ())
let false_ = (False, ())
let iszero t = (IsZero t, ())
let unit = (Unit, ())
let annotated t tp = (Annotated (t, tp), ())

(* let%test "checking let/in" = *)
(*   let ast = *)
(*     let_in (("x", 0), iszero (succ zero), let_in (("y", 1), zero, var ("y", 1))) *)
(*   in *)
(*   let tp = Nat in *)
(*   check [] ast tp |> ignore; *)
(*   true *)
(**)
(* let%test "checking borrowing bound variables" = *)
(*   let ast = *)
(*     let_in *)
(*       ( ("x", 0), *)
(*         succ zero, *)
(*         let_in (("y", 1), borrow (var ("x", 0)), var ("y", 1)) ) *)
(*   in *)
(*   let tp = Ref (Scope 0, Nat, Shr) in *)
(*   check [] ast tp |> ignore; *)
(*   true *)
(**)
(* let%test "checking borrowing bound variables against a lifetime variable" = *)
(*   let ast = *)
(*     let_in *)
(*       ( ("x", 0), *)
(*         succ zero, *)
(*         let_in (("y", 1), borrow (var ("x", 0)), var ("y", 1)) ) *)
(*   in *)
(*   let tp = Ref (LifetimeVar "a", Nat, Shr) in *)
(*   check [] ast tp |> ignore; *)
(*   true *)
(**)
(* let%test "reassigning a reference with a smaller lifetime should fail" = *)
(*   let ast = *)
(*     let_in *)
(*       ( ("x", 0), *)
(*         succ zero, *)
(*         let_in *)
(*           ( ("y", 1), *)
(*             borrow (var ("x", 0)), *)
(*             let_in (("z", 2), zero, assign (("y", 1), borrow (var ("z", 2)))) ) *)
(*       ) *)
(*   in *)
(*   let tp = Ref (Any, Nat, Shr) in *)
(*   match check [] ast tp with *)
(*   | exception TypeError _ -> true *)
(*   | (exception _) | _ -> false *)
(**)
(* let%test *)
(*     "can reassign a mutable reference to an immutable one with a smaller \ *)
(*      lifetime" = *)
(*   let ast = *)
(*     let_in *)
(*       ( ("x", 0), *)
(*         succ zero, *)
(*         let_in *)
(*           ( ("y", 1), *)
(*             zero, *)
(*             let_in *)
(*               ( ("z", 2), *)
(*                 borrow (var ("y", 1)), *)
(*                 assign (("z", 2), borrow_mut (var ("x", 0))) ) ) ) *)
(*   in *)
(*   check [] ast Unit |> ignore; *)
(*   true *)
